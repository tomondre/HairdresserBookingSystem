@using Radzen
@using API.Models
@using Client.Data.Authentication
@using global::Shared.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="col-xl-4 p-3">
    <RadzenCard>
        <h2 class="mb-4">Prihlásenie</h2>
        <RadzenTemplateForm Data=@("LoginWithRegisterAndReset")>
            <RadzenLogin Login=@(args => OnLogin(args, "Prihlásenie")) 
                         ResetPassword=@(args => OnResetPassword(args, "Login with register and password reset"))
                         Register=@(args => OnRegister("Login with register and password reset")) 
                         LoginText="Prihlásiť" UserText="Email" PasswordText="Heslo"
                         UserRequired="Email je povinný"
                         PasswordRequired="Heslo je povinné"
                         RegisterText="Zaregistrovať sa"
                         RegisterMessageText="Nemáš ešte účet?"
                         ResetPasswordText="Zabudol som heslo."
                         />
            </RadzenTemplateForm>
    </RadzenCard>
</div>


@code {

    async Task OnLogin(LoginArgs args, string name)
    {
        User user = new User()
        {
            Email = args.Username,
            Password = Helper.Hash(args.Password)
        };
        try
        {
            await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateUser(user);
            NavigationManager.NavigateTo("/");
            
        }
        catch (Exception e)
        {
            //TODO display error handling
            Console.WriteLine(e);
        }
    }
    
    void OnRegister(string name)
    {
        NavigationManager.NavigateTo("/register");
    }

    void OnResetPassword(string value, string name)
    {
        // console.Log($"{name} -> ResetPassword for user: {value}");
    }
}