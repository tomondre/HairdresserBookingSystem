@using API.Models
@using Client.Data
@using Client.Data.Users
@using Client.Models
@using global::Shared.Models
@using Radzen
@inject ICacheService CacheService
@inject IProductService ProductService
@inject DialogService DialogService

<RadzenDataGrid @ref="grid" IsLoading="@isLoading" TItem="Product" Data="@Products.Products">
    <Columns>
        <RadzenDataGridColumn Title="Id" TItem="Product" Property="Id">
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Title="Meno" TItem="Product" Property="Name">
            <EditTemplate Context="product">
                <RadzenTextArea @bind-Value="product.Name" Style="width:100%"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Title="Popis" TItem="Product" Property="Description">
            <EditTemplate Context="product">
                <RadzenTextArea @bind-Value="product.Description" Style="width:100%"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Title="Cena" TItem="Product" Property="Price">
            <EditTemplate Context="product">
                <RadzenNumeric @bind-Value="product.Price" Style="width:100%"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Title="Dĺžka v minútach" TItem="Product" Property="ProcedureLengthInMinutes">
            <EditTemplate Context="product">
                <RadzenNumeric @bind-Value="product.ProcedureLengthInMinutes" Style="width:100%"/>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Product" Context="product" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
            <Template Context="product">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(product))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="product">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(product))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(product))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Product" Context="product" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
            <Template Context="product">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(product))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="product">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(product))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>
<em>@errorMessage</em>

@code {
    private string errorMessage = "";
    private RadzenDataGrid<Product> grid;
    private bool isLoading = true;
    private ProductList Products = new ProductList();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var openedCompanyAsync = await CacheService.GetLoggedInUserCompanyAsync();
            Products = await ProductService.GetAllCompanyProducts(openedCompanyAsync.Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        isLoading = false;
    }

    private void EditRow(Product product)
    {
        grid.EditRow(product);
    }

    private async Task SaveRow(Product product)
    {
        try
        {
            await ProductService.UpdateProductAsync(product);
            await grid.UpdateRow(product);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            grid.CancelEditRow(product);
            errorMessage = e.Message;
        }
    }

    private void CancelEdit(Product product)
    {
        grid.CancelEditRow(product);
    }

    private async Task DeleteRow(Product product)
    {
        try
        {
            var confirm = await DialogService.Confirm($"Naozaj chcete vymazať produkt {product.Name}?");
            if (confirm.HasValue && confirm.Value)
            {
                await ProductService.DeleteProductAsync(product.Id);
                Products.Products.Remove(product);
                await grid.Reload();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMessage = e.Message;
        }
    }

}