@using Radzen
@using Microsoft.AspNetCore.Components
@using Client.Models
@using Client.Data
@using Client.Data.Appointments
@using Client.Data.Users
@using global::Shared.Models

@inject DialogService DialogService
@inject IProductService ProductService
@inject IAppointmentService AppointmentService
@inject ICacheService CacheService


<RadzenTemplateForm TItem="Appointment" Data="@model" Submit=@OnSubmit>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Produkt"/>
        </div>

        <div class="col">
            @if (products != null)
            {
                <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                Data=@products.Products @bind-Value=@model.Product TextProperty="Name"/>
            }
            else
            {
                <em>Loading</em>
            }
        </div>
    </div>

    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Cena"/>
        </div>

        <div class="col">
            @if (products != null)
            {
                <RadzenNumeric Disabled="true" TValue="double" @bind-Value="model.Product.Price"/>
            }
            else
            {
                <em>Loading...</em>
            }
        </div>
    </div>

    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Dĺžka v minútach"/>
        </div>

        <div class="col">
            @if (products != null)
            {
                <RadzenNumeric Disabled="true" TValue="int" @bind-Value="model.Product.ProcedureLengthInMinutes"/>
            }
            else
            {
                <em>Loading...</em>
            }
        </div>
    </div>

    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Začiatok"/>
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@model.Start" Name="Start" ShowTime="true"/>
            <RadzenRequiredValidator Text="Start is required" Component="Start"/>
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Koniec"/>
        </div>
        <div class="col">
            <RadzenDatePicker Name="End" @bind-Value="@model.End" ShowTime="true" ReadOnly="true"/>
        </div>
    </div>
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col">
            <RadzenButton Disabled="@(Loading)" Style="@(Loading ? "cursor: \"wait;\"" : "")" ButtonType="ButtonType.Submit" Text="Save"/>
        </div>
    </div>
</RadzenTemplateForm>

@code {

    [Parameter]
    public DateTime Start { get; set; }

    private ProductList products;

    private bool Loading = false;

    Appointment model = new();

    protected override void OnParametersSet()
    {
        model.Start = Start;
    }

    protected override async Task OnInitializedAsync()
    {
        var allCompanyProducts = ProductService.GetAllCompanyProducts(3);
        var cachedUserAsync = CacheService.GetUserAsync();
        var openedCompanyAsync = CacheService.GetOpenedCompanyAsync();
        await Task.WhenAll(allCompanyProducts, cachedUserAsync, openedCompanyAsync);

        products = allCompanyProducts.Result;
        model.Customer = (Customer) cachedUserAsync.Result;
        model.Product = products.Products[0];
    }

    void OnSubmit(Appointment model)
    {
        Loading = true;
        try
        {
            AppointmentService.CreateAppointmentAsync(model);
        }
        catch (Exception e)
        {
        }
        DialogService.Close(model);
    }

}