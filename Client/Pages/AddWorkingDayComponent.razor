@using Radzen
@using Microsoft.AspNetCore.Components
@using Client.Models
@using Client.Data
@using Client.Data.Appointments
@using Client.Data.Users
@using global::Shared.Models

@inject IWorkingDayService WorkingDayService
@inject ICacheService CacheService
@inject NavigationManager NavigationManager

<RadzenTemplateForm TItem="WorkingDay" Data="@model" Submit=@OnSubmit>
    <RadzenFieldset Text="Pridať pracovný deň">
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Začiatok"/>
            </div>
            <div class="col">
                <RadzenDatePicker @bind-Value="@model.Start" Name="Start" ShowTime="true"/>
                <RadzenRequiredValidator Text="Start is required" Component="Start"/>
            </div>
        </div>
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Koniec"/>
            </div>
            <div class="col">
                <RadzenDatePicker Name="End" @bind-Value="@model.End" ShowTime="true"/>
            </div>
        </div>

        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Prestávka"/>
            </div>
            <div class="col">
                <RadzenCheckBox @bind-Value="IsBreakTicked" Name="Prestávka"/>
            </div>
        </div>

        @if (IsBreakTicked)
        {
            <div class="row" style="margin-bottom: 16px">
                <div class="col-md-3">
                    <RadzenLabel Text="Začiatok prestávky"/>
                </div>
                <div class="col">
                    <RadzenDatePicker Change="BreakTimeChanged" TValue="DateTime?" TimeOnly="true" DateFormat="HH:mm" Name="BreakStart" ShowTime="true"/>
                </div>
            </div>

            <div class="row" style="margin-bottom: 16px">
                <div class="col-md-3">
                    <RadzenLabel Text="Dĺžka prestávky v minútach"/>
                </div>

                <div class="col">
                    <RadzenNumeric TValue="int" @bind-Value="model.BreakLengthInMinutes"/>
                </div>
            </div>
        }

        <div class="row">
            <div class="col-md-3"></div>
            <div class="col">
                <RadzenButton Disabled="@(Loading)" Style="@(Loading ? "cursor: \"wait;\"" : "")" ButtonType="ButtonType.Submit" Text="Save"/>
            </div>
        </div>
    </RadzenFieldset>
</RadzenTemplateForm>
<em>@errorMessage</em>


@code {
    private string errorMessage = "";
    private bool IsBreakTicked = false;
    private bool Loading = false;
    private DateTime BreakStart;
    private WorkingDay model = new();

    protected override async Task OnInitializedAsync()
    {
        model.Start = DateTime.Now.AddDays(1);
        model.End = model.Start.AddHours(8);
        BreakStart = model.Start.AddHours(4);
    }

    async Task OnSubmit(WorkingDay model)
    {
        Loading = true;
        try
        {
            if (!IsBreakTicked)
            {
                model.StartBreak = DateTime.MinValue;
                model.BreakLengthInMinutes = 0;
            }
            var loggedInCompanyUserCompanyAsync = await CacheService.GetLoggedInUserCompanyAsync();
            model.Company.Id = loggedInCompanyUserCompanyAsync.Id;
            await WorkingDayService.CreateWorkingDayAsync(model);
            Loading = false;
            NavigationManager.NavigateTo("/workingdays", true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            errorMessage = e.Message;
        }
    }

    private void BreakTimeChanged(DateTime? args)
    {
        if (args.HasValue)
        {
            var s = model.Start;
            var a = args.Value;
            model.StartBreak = new DateTime(s.Year, s.Month, s.Day, a.Hour, a.Minute, a.Millisecond);
        }
    }
}