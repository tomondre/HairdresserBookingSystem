@page "/calendar"

@using Client.Models
@using Radzen
@using API.Models
@using Client.Data
@using Client.Data.Caches
@using Client.Data.Users
@inject DialogService DialogService
@inject IWorkingDayService _workingDayService
@inject ICacheService CacheService

@if (appointments == null)
{
    <em>Loading, please wait</em>
}
else
{
    <RadzenScheduler @ref=@scheduler Name="Scheduler" Data="@appointments" TItem="Appointment" StartProperty="Start" EndProperty="End" TextProperty="Text"
                     AppointmentRender=@OnAppointmentRender
                     Style="height: 768px">
        <RadzenDayView/>
        <RadzenWeekView/>
        <RadzenMonthView/>
    </RadzenScheduler>
}



@code {
    RadzenScheduler<Appointment> scheduler;

    IList<Appointment> appointments;

    protected override async Task OnInitializedAsync()
    {
        var loggedInCompanyUserCompanyAsync = await CacheService.GetLoggedInCompanyUserCompanyAsync();
        var workingDayList = await _workingDayService.GetWorkingDayAsync(loggedInCompanyUserCompanyAsync.Id);
        appointments = workingDayList.Appointments;
    }
    
    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
    // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Otváracie hodiny")
        {
            args.Attributes["style"] = "background: cyan";
        }
        else if (args.Data.Text == "Pánsky Strih")
        {
            args.Attributes["style"] = "background: red";
        }
        else
        {
            args.Attributes["style"] = "background: grey";
        }
    }

}